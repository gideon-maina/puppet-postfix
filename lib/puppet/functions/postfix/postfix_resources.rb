# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#           This function will make all the parameters declared for the postfix module (Thias) to be
#    set as well formed hash values so that create_resources on them will convert it to the 
#    required resources 
#    I.e
#    given these parameters in declaration
#    {
#        myhostname              => 'gideon.vnet.com',
#        mydomain                => 'vnet.com',
#        mydestination           => "\$myhostname, localhost.\$mydomain, localhost, $fqdn",
#        inet_interfaces         => 'all',
#        message_size_limit      => '15360000', # 15MB
#        mail_name               => 'example mail daemon',
#        virtual_mailbox_domains => [
#          'proxy:mysql:/etc/postfix/mysql_virtual_domains_maps.cf',
#        ],
#      }
#        Will result to the following final hash that create_resources can be called on 
#        (THIS WILL EXCLUDE ALL THE HASH VALUES AND RETURN ON THE SINGLE KEY VALUE ELEMENTS ONLY)
#        RESULT = {
#          myhostname => {
#          ensure => present,
#          value  => 'gideon.vnet.com',
#          },
#          mydomain => {
#          ensure => present,
#          value  => 'vnet.com',
#          }
#          inet_interfaces => {
#          ensure  => present,
#          value   => 'all',
#          }
#          mail_name => {
#          ensure  => present,
#          value   => 'example mail daemon',
#          }
#          ...(continuation)
#        }
#
#
#
Puppet::Functions.create_function(:'postfix::postfix_resources') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
     #Check that we have at least one argument
     if args.length < 1
       raise Puppet::ParseError,("postfix_resources: Expects an argument")
     end

     
      many_options = args[0]
      unless many_options.is_a?(Hash)
       raise Puppet::ParseError,("postfix_resources: The argument must be a hash provided")
     end
     

    def postfix_hash (options)
      options.each {|key, value|
        if (value.is_a?(String))
          #Create a new hash
          newhash = Hash.new
          newhash[key] = { "ensure" => "present", "value" => value }
          return newhash
        end#end if 
      }
    end#end def function
    postfix_hash(many_options)
 
  end
end
